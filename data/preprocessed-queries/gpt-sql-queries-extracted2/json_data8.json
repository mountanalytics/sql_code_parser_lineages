{
    "modified_SQL_query": "INSERT INTO PROCESS_DB.sector_analysis ( sector, total_stocks, total_trade_value_last_year, avg_trade_value_last_year, max_trade_value_last_year, min_trade_value_last_year, total_dividends_paid, avg_dividend_yield_last_year, max_dividend_yield_last_year, min_dividend_yield_last_year, avg_stock_performance_last_year, max_stock_performance_last_year, min_stock_performance_last_year, total_investors, total_portfolios, total_trades_last_year, highest_trade_stock, lowest_trade_stock, most_active_investor, least_active_investor ) SELECT s.sector, COUNT(DISTINCT s.stock_id) AS total_stocks, SUM(t.quantity * t.price_per_share) FILTER (WHERE t.trade_date >= DATEADD(year, -1, GETDATE())) AS total_trade_value_last_year, AVG(t.quantity * t.price_per_share) FILTER (WHERE t.trade_date >= DATEADD(year, -1, GETDATE())) AS avg_trade_value_last_year, MAX(t.quantity * t.price_per_share) FILTER (WHERE t.trade_date >= DATEADD(year, -1, GETDATE())) AS max_trade_value_last_year, MIN(t.quantity * t.price_per_share) FILTER (WHERE t.trade_date >= DATEADD(year, -1, GETDATE())) AS min_trade_value_last_year, SUM(d.dividend_amount * t.quantity) AS total_dividends_paid, AVG(CASE WHEN md.closing_price > 0 THEN d.dividend_amount / md.closing_price ELSE 0 END) FILTER (WHERE d.dividend_date >= DATEADD(year, -1, GETDATE())) AS avg_dividend_yield_last_year, MAX(CASE WHEN md.closing_price > 0 THEN d.dividend_amount / md.closing_price ELSE 0 END) FILTER (WHERE d.dividend_date >= DATEADD(year, -1, GETDATE())) AS max_dividend_yield_last_year, MIN(CASE WHEN md.closing_price > 0 THEN d.dividend_amount / md.closing_price ELSE 0 END) FILTER (WHERE d.dividend_date >= DATEADD(year, -1, GETDATE())) AS min_dividend_yield_last_year, AVG(md.closing_price) FILTER (WHERE md.market_date >= DATEADD(year, -1, GETDATE())) AS avg_stock_performance_last_year, MAX(md.closing_price) FILTER (WHERE md.market_date >= DATEADD(year, -1, GETDATE())) AS max_stock_performance_last_year, MIN(md.closing_price) FILTER (WHERE md.market_date >= DATEADD(year, -1, GETDATE())) AS min_stock_performance_last_year, COUNT(DISTINCT i.investor_id) AS total_investors, COUNT(DISTINCT p.portfolio_id) AS total_portfolios, COUNT(t.trade_id) FILTER (WHERE t.trade_date >= DATEADD(year, -1, GETDATE())) AS total_trades_last_year, (SELECT s1.ticker FROM subquery1_1) AS highest_trade_stock, (SELECT s1.ticker FROM subquery1_2) AS lowest_trade_stock, (SELECT i1.investor_id FROM subquery1_3) AS most_active_investor, (SELECT i1.investor_id FROM subquery1_4) AS least_active_investor FROM SOURCE_DB.stocks s JOIN SOURCE_DB.trades t ON s.stock_id = t.stock_id JOIN SOURCE_DB.dividends d ON s.stock_id = d.stock_id JOIN SOURCE_DB.market_data md ON s.stock_id = md.stock_id JOIN SOURCE_DB.investors i ON t.investor_id = i.investor_id JOIN SOURCE_DB.portfolios p ON i.investor_id = p.investor_id GROUP BY s.sector",
    "subquery_dictionary": {
        "subquery1_1": "SELECT s1.ticker FROM SOURCE_DB.trades t1 JOIN SOURCE_DB.stocks s1 ON t1.stock_id = s1.stock_id WHERE s1.sector = s.sector GROUP BY s1.ticker ORDER BY SUM(t1.quantity * t1.price_per_share) DESC LIMIT 1",
        "subquery1_2": "SELECT s1.ticker FROM SOURCE_DB.trades t1 JOIN SOURCE_DB.stocks s1 ON t1.stock_id = s1.stock_id WHERE s1.sector = s.sector GROUP BY s1.ticker ORDER BY SUM(t1.quantity * t1.price_per_share) ASC LIMIT 1",
        "subquery1_3": "SELECT i1.investor_id FROM SOURCE_DB.trades t1 JOIN SOURCE_DB.investors i1 ON t1.investor_id = i1.investor_id WHERE t1.sector = s.sector GROUP BY i1.investor_id ORDER BY COUNT(t1.trade_id) DESC LIMIT 1",
        "subquery1_4": "SELECT i1.investor_id FROM SOURCE_DB.trades t1 JOIN SOURCE_DB.investors i1 ON t1.investor_id = i1.investor_id WHERE t1.sector = s.sector GROUP BY i1.investor_id ORDER BY COUNT(t1.trade_id) ASC LIMIT 1"
    }
}