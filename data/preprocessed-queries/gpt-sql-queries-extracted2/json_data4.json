{
    "modified_SQL_query": "INSERT INTO PROCESS_DB.portfolio_performance ( portfolio_id, investor_id, portfolio_name, total_trades_last_month, total_trade_value_last_month, total_dividends_last_year, avg_stock_performance_last_year, total_investment_value_current, most_active_stock, least_active_stock, highest_trade_stock, lowest_trade_stock, max_single_trade_value, min_single_trade_value, avg_single_trade_value, total_stock_count, total_sectors, most_invested_sector, least_invested_sector, most_recent_trade_date, total_dividend_yield ) SELECT p.portfolio_id, p.investor_id, p.portfolio_name, COUNT(t.trade_id) FILTER (WHERE t.trade_date >= DATEADD(month, -1, GETDATE())) AS total_trades_last_month, SUM(t.quantity * t.price_per_share) FILTER (WHERE t.trade_date >= DATEADD(month, -1, GETDATE())) AS total_trade_value_last_month, SUM(d.dividend_amount * t.quantity) FILTER (WHERE d.dividend_date >= DATEADD(year, -1, GETDATE())) AS total_dividends_last_year, AVG(md.closing_price) FILTER (WHERE md.market_date >= DATEADD(year, -1, GETDATE())) AS avg_stock_performance_last_year, SUM(t.quantity * md.closing_price) FILTER (WHERE md.market_date = (subquery1_1)) AS total_investment_value_current, (subquery1_2) AS most_active_stock, (subquery1_3) AS least_active_stock, (subquery1_4) AS highest_trade_stock, (subquery1_5) AS lowest_trade_stock, MAX(t.quantity * t.price_per_share) AS max_single_trade_value, MIN(t.quantity * t.price_per_share) AS min_single_trade_value, AVG(t.quantity * t.price_per_share) AS avg_single_trade_value, COUNT(DISTINCT t.stock_id) AS total_stock_count, COUNT(DISTINCT s.sector) AS total_sectors, (subquery1_6) AS most_invested_sector, (subquery1_7) AS least_invested_sector, MAX(t.trade_date) AS most_recent_trade_date, CASE WHEN SUM(md.closing_price) > 0 THEN SUM(d.dividend_amount * t.quantity) / SUM(md.closing_price) ELSE 0 END AS total_dividend_yield FROM SOURCE_DB.portfolios p JOIN SOURCE_DB.trades t ON p.portfolio_id = t.portfolio_id JOIN SOURCE_DB.stocks s ON t.stock_id = s.stock_id JOIN SOURCE_DB.dividends d ON t.stock_id = d.stock_id JOIN SOURCE_DB.market_data md ON t.stock_id = md.stock_id GROUP BY p.portfolio_id, p.investor_id, p.portfolio_name",
    "subquery_dictionary": {
        "subquery1_1": "SELECT MAX(market_date) FROM SOURCE_DB.market_data",
        "subquery1_2": "SELECT s.ticker FROM SOURCE_DB.trades t1 JOIN SOURCE_DB.stocks s ON t1.stock_id = s.stock_id WHERE t1.portfolio_id = p.portfolio_id GROUP BY s.ticker ORDER BY COUNT(t1.trade_id) DESC LIMIT 1",
        "subquery1_3": "SELECT s.ticker FROM SOURCE_DB.trades t1 JOIN SOURCE_DB.stocks s ON t1.stock_id = s.stock_id WHERE t1.portfolio_id = p.portfolio_id GROUP BY s.ticker ORDER BY COUNT(t1.trade_id) ASC LIMIT 1",
        "subquery1_4": "SELECT s.ticker FROM SOURCE_DB.trades t1 JOIN SOURCE_DB.stocks s ON t1.stock_id = s.stock_id WHERE t1.portfolio_id = p.portfolio_id GROUP BY s.ticker ORDER BY SUM(t1.quantity * t1.price_per_share) DESC LIMIT 1",
        "subquery1_5": "SELECT s.ticker FROM SOURCE_DB.trades t1 JOIN SOURCE_DB.stocks s ON t1.stock_id = s.stock_id WHERE t1.portfolio_id = p.portfolio_id GROUP BY s.ticker ORDER BY SUM(t1.quantity * t1.price_per_share) ASC LIMIT 1",
        "subquery1_6": "SELECT s.sector FROM SOURCE_DB.trades t1 JOIN SOURCE_DB.stocks s ON t1.stock_id = s.stock_id WHERE t1.portfolio_id = p.portfolio_id GROUP BY s.sector ORDER BY SUM(t1.quantity * t1.price_per_share) DESC LIMIT 1",
        "subquery1_7": "SELECT s.sector FROM SOURCE_DB.trades t1 JOIN SOURCE_DB.stocks s ON t1.stock_id = s.stock_id WHERE t1.portfolio_id = p.portfolio_id GROUP BY s.sector ORDER BY SUM(t1.quantity * t1.price_per_share) ASC LIMIT 1"
    }
}